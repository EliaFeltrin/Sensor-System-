
HOMEWORK2_b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030cc  080030cc  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030d4  080030d4  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080030dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200000cc  080031a8  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080031a8  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0ff  00000000  00000000  0002013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d3  00000000  00000000  0002c23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  0002dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000902  00000000  00000000  0002e788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000154aa  00000000  00000000  0002f08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c36d  00000000  00000000  00044534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000893f7  00000000  00000000  000508a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003210  00000000  00000000  000d9c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000dcea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000cc 	.word	0x200000cc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800309c 	.word	0x0800309c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000d0 	.word	0x200000d0
 80001d0:	0800309c 	.word	0x0800309c

080001d4 <__aeabi_dmul>:
 80001d4:	b570      	push	{r4, r5, r6, lr}
 80001d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e2:	bf1d      	ittte	ne
 80001e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e8:	ea94 0f0c 	teqne	r4, ip
 80001ec:	ea95 0f0c 	teqne	r5, ip
 80001f0:	f000 f8de 	bleq	80003b0 <__aeabi_dmul+0x1dc>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea81 0603 	eor.w	r6, r1, r3
 80001fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000202:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000206:	bf18      	it	ne
 8000208:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800020c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000214:	d038      	beq.n	8000288 <__aeabi_dmul+0xb4>
 8000216:	fba0 ce02 	umull	ip, lr, r0, r2
 800021a:	f04f 0500 	mov.w	r5, #0
 800021e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000222:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000226:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022a:	f04f 0600 	mov.w	r6, #0
 800022e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000232:	f09c 0f00 	teq	ip, #0
 8000236:	bf18      	it	ne
 8000238:	f04e 0e01 	orrne.w	lr, lr, #1
 800023c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000240:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000244:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000248:	d204      	bcs.n	8000254 <__aeabi_dmul+0x80>
 800024a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024e:	416d      	adcs	r5, r5
 8000250:	eb46 0606 	adc.w	r6, r6, r6
 8000254:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000258:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800025c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000260:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000264:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000268:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800026c:	bf88      	it	hi
 800026e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000272:	d81e      	bhi.n	80002b2 <__aeabi_dmul+0xde>
 8000274:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800028c:	ea46 0101 	orr.w	r1, r6, r1
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	ea81 0103 	eor.w	r1, r1, r3
 8000298:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800029c:	bfc2      	ittt	gt
 800029e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a6:	bd70      	popgt	{r4, r5, r6, pc}
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f04f 0e00 	mov.w	lr, #0
 80002b0:	3c01      	subs	r4, #1
 80002b2:	f300 80ab 	bgt.w	800040c <__aeabi_dmul+0x238>
 80002b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ba:	bfde      	ittt	le
 80002bc:	2000      	movle	r0, #0
 80002be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c2:	bd70      	pople	{r4, r5, r6, pc}
 80002c4:	f1c4 0400 	rsb	r4, r4, #0
 80002c8:	3c20      	subs	r4, #32
 80002ca:	da35      	bge.n	8000338 <__aeabi_dmul+0x164>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc1b      	bgt.n	8000308 <__aeabi_dmul+0x134>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f305 	lsl.w	r3, r0, r5
 80002dc:	fa20 f004 	lsr.w	r0, r0, r4
 80002e0:	fa01 f205 	lsl.w	r2, r1, r5
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f4:	fa21 f604 	lsr.w	r6, r1, r4
 80002f8:	eb42 0106 	adc.w	r1, r2, r6
 80002fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000300:	bf08      	it	eq
 8000302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f1c4 040c 	rsb	r4, r4, #12
 800030c:	f1c4 0520 	rsb	r5, r4, #32
 8000310:	fa00 f304 	lsl.w	r3, r0, r4
 8000314:	fa20 f005 	lsr.w	r0, r0, r5
 8000318:	fa01 f204 	lsl.w	r2, r1, r4
 800031c:	ea40 0002 	orr.w	r0, r0, r2
 8000320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f205 	lsl.w	r2, r0, r5
 8000340:	ea4e 0e02 	orr.w	lr, lr, r2
 8000344:	fa20 f304 	lsr.w	r3, r0, r4
 8000348:	fa01 f205 	lsl.w	r2, r1, r5
 800034c:	ea43 0302 	orr.w	r3, r3, r2
 8000350:	fa21 f004 	lsr.w	r0, r1, r4
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	fa21 f204 	lsr.w	r2, r1, r4
 800035c:	ea20 0002 	bic.w	r0, r0, r2
 8000360:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000368:	bf08      	it	eq
 800036a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f094 0f00 	teq	r4, #0
 8000374:	d10f      	bne.n	8000396 <__aeabi_dmul+0x1c2>
 8000376:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037a:	0040      	lsls	r0, r0, #1
 800037c:	eb41 0101 	adc.w	r1, r1, r1
 8000380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000384:	bf08      	it	eq
 8000386:	3c01      	subeq	r4, #1
 8000388:	d0f7      	beq.n	800037a <__aeabi_dmul+0x1a6>
 800038a:	ea41 0106 	orr.w	r1, r1, r6
 800038e:	f095 0f00 	teq	r5, #0
 8000392:	bf18      	it	ne
 8000394:	4770      	bxne	lr
 8000396:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	eb43 0303 	adc.w	r3, r3, r3
 80003a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a4:	bf08      	it	eq
 80003a6:	3d01      	subeq	r5, #1
 80003a8:	d0f7      	beq.n	800039a <__aeabi_dmul+0x1c6>
 80003aa:	ea43 0306 	orr.w	r3, r3, r6
 80003ae:	4770      	bx	lr
 80003b0:	ea94 0f0c 	teq	r4, ip
 80003b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b8:	bf18      	it	ne
 80003ba:	ea95 0f0c 	teqne	r5, ip
 80003be:	d00c      	beq.n	80003da <__aeabi_dmul+0x206>
 80003c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c4:	bf18      	it	ne
 80003c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ca:	d1d1      	bne.n	8000370 <__aeabi_dmul+0x19c>
 80003cc:	ea81 0103 	eor.w	r1, r1, r3
 80003d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003de:	bf06      	itte	eq
 80003e0:	4610      	moveq	r0, r2
 80003e2:	4619      	moveq	r1, r3
 80003e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e8:	d019      	beq.n	800041e <__aeabi_dmul+0x24a>
 80003ea:	ea94 0f0c 	teq	r4, ip
 80003ee:	d102      	bne.n	80003f6 <__aeabi_dmul+0x222>
 80003f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f4:	d113      	bne.n	800041e <__aeabi_dmul+0x24a>
 80003f6:	ea95 0f0c 	teq	r5, ip
 80003fa:	d105      	bne.n	8000408 <__aeabi_dmul+0x234>
 80003fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000400:	bf1c      	itt	ne
 8000402:	4610      	movne	r0, r2
 8000404:	4619      	movne	r1, r3
 8000406:	d10a      	bne.n	800041e <__aeabi_dmul+0x24a>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000422:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000426:	bd70      	pop	{r4, r5, r6, pc}

08000428 <__aeabi_drsub>:
 8000428:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800042c:	e002      	b.n	8000434 <__adddf3>
 800042e:	bf00      	nop

08000430 <__aeabi_dsub>:
 8000430:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000434 <__adddf3>:
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	bf1f      	itttt	ne
 800044a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000452:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000456:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045a:	f000 80e2 	beq.w	8000622 <__adddf3+0x1ee>
 800045e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000462:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000466:	bfb8      	it	lt
 8000468:	426d      	neglt	r5, r5
 800046a:	dd0c      	ble.n	8000486 <__adddf3+0x52>
 800046c:	442c      	add	r4, r5
 800046e:	ea80 0202 	eor.w	r2, r0, r2
 8000472:	ea81 0303 	eor.w	r3, r1, r3
 8000476:	ea82 0000 	eor.w	r0, r2, r0
 800047a:	ea83 0101 	eor.w	r1, r3, r1
 800047e:	ea80 0202 	eor.w	r2, r0, r2
 8000482:	ea81 0303 	eor.w	r3, r1, r3
 8000486:	2d36      	cmp	r5, #54	; 0x36
 8000488:	bf88      	it	hi
 800048a:	bd30      	pophi	{r4, r5, pc}
 800048c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000490:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000494:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000498:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800049c:	d002      	beq.n	80004a4 <__adddf3+0x70>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x84>
 80004b2:	4252      	negs	r2, r2
 80004b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b8:	ea94 0f05 	teq	r4, r5
 80004bc:	f000 80a7 	beq.w	800060e <__adddf3+0x1da>
 80004c0:	f1a4 0401 	sub.w	r4, r4, #1
 80004c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c8:	db0d      	blt.n	80004e6 <__adddf3+0xb2>
 80004ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ce:	fa22 f205 	lsr.w	r2, r2, r5
 80004d2:	1880      	adds	r0, r0, r2
 80004d4:	f141 0100 	adc.w	r1, r1, #0
 80004d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004dc:	1880      	adds	r0, r0, r2
 80004de:	fa43 f305 	asr.w	r3, r3, r5
 80004e2:	4159      	adcs	r1, r3
 80004e4:	e00e      	b.n	8000504 <__adddf3+0xd0>
 80004e6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ea:	f10e 0e20 	add.w	lr, lr, #32
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f4:	bf28      	it	cs
 80004f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	18c0      	adds	r0, r0, r3
 8000500:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	d507      	bpl.n	800051a <__adddf3+0xe6>
 800050a:	f04f 0e00 	mov.w	lr, #0
 800050e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000512:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000516:	eb6e 0101 	sbc.w	r1, lr, r1
 800051a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051e:	d31b      	bcc.n	8000558 <__adddf3+0x124>
 8000520:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000524:	d30c      	bcc.n	8000540 <__adddf3+0x10c>
 8000526:	0849      	lsrs	r1, r1, #1
 8000528:	ea5f 0030 	movs.w	r0, r0, rrx
 800052c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000530:	f104 0401 	add.w	r4, r4, #1
 8000534:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000538:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800053c:	f080 809a 	bcs.w	8000674 <__adddf3+0x240>
 8000540:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	ea41 0105 	orr.w	r1, r1, r5
 8000556:	bd30      	pop	{r4, r5, pc}
 8000558:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800055c:	4140      	adcs	r0, r0
 800055e:	eb41 0101 	adc.w	r1, r1, r1
 8000562:	3c01      	subs	r4, #1
 8000564:	bf28      	it	cs
 8000566:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056a:	d2e9      	bcs.n	8000540 <__adddf3+0x10c>
 800056c:	f091 0f00 	teq	r1, #0
 8000570:	bf04      	itt	eq
 8000572:	4601      	moveq	r1, r0
 8000574:	2000      	moveq	r0, #0
 8000576:	fab1 f381 	clz	r3, r1
 800057a:	bf08      	it	eq
 800057c:	3320      	addeq	r3, #32
 800057e:	f1a3 030b 	sub.w	r3, r3, #11
 8000582:	f1b3 0220 	subs.w	r2, r3, #32
 8000586:	da0c      	bge.n	80005a2 <__adddf3+0x16e>
 8000588:	320c      	adds	r2, #12
 800058a:	dd08      	ble.n	800059e <__adddf3+0x16a>
 800058c:	f102 0c14 	add.w	ip, r2, #20
 8000590:	f1c2 020c 	rsb	r2, r2, #12
 8000594:	fa01 f00c 	lsl.w	r0, r1, ip
 8000598:	fa21 f102 	lsr.w	r1, r1, r2
 800059c:	e00c      	b.n	80005b8 <__adddf3+0x184>
 800059e:	f102 0214 	add.w	r2, r2, #20
 80005a2:	bfd8      	it	le
 80005a4:	f1c2 0c20 	rsble	ip, r2, #32
 80005a8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b0:	bfdc      	itt	le
 80005b2:	ea41 010c 	orrle.w	r1, r1, ip
 80005b6:	4090      	lslle	r0, r2
 80005b8:	1ae4      	subs	r4, r4, r3
 80005ba:	bfa2      	ittt	ge
 80005bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c0:	4329      	orrge	r1, r5
 80005c2:	bd30      	popge	{r4, r5, pc}
 80005c4:	ea6f 0404 	mvn.w	r4, r4
 80005c8:	3c1f      	subs	r4, #31
 80005ca:	da1c      	bge.n	8000606 <__adddf3+0x1d2>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc0e      	bgt.n	80005ee <__adddf3+0x1ba>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0220 	rsb	r2, r4, #32
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f302 	lsl.w	r3, r1, r2
 80005e0:	ea40 0003 	orr.w	r0, r0, r3
 80005e4:	fa21 f304 	lsr.w	r3, r1, r4
 80005e8:	ea45 0103 	orr.w	r1, r5, r3
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	f1c4 040c 	rsb	r4, r4, #12
 80005f2:	f1c4 0220 	rsb	r2, r4, #32
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 f304 	lsl.w	r3, r1, r4
 80005fe:	ea40 0003 	orr.w	r0, r0, r3
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	fa21 f004 	lsr.w	r0, r1, r4
 800060a:	4629      	mov	r1, r5
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	f094 0f00 	teq	r4, #0
 8000612:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000616:	bf06      	itte	eq
 8000618:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800061c:	3401      	addeq	r4, #1
 800061e:	3d01      	subne	r5, #1
 8000620:	e74e      	b.n	80004c0 <__adddf3+0x8c>
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf18      	it	ne
 8000628:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800062c:	d029      	beq.n	8000682 <__adddf3+0x24e>
 800062e:	ea94 0f05 	teq	r4, r5
 8000632:	bf08      	it	eq
 8000634:	ea90 0f02 	teqeq	r0, r2
 8000638:	d005      	beq.n	8000646 <__adddf3+0x212>
 800063a:	ea54 0c00 	orrs.w	ip, r4, r0
 800063e:	bf04      	itt	eq
 8000640:	4619      	moveq	r1, r3
 8000642:	4610      	moveq	r0, r2
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	ea91 0f03 	teq	r1, r3
 800064a:	bf1e      	ittt	ne
 800064c:	2100      	movne	r1, #0
 800064e:	2000      	movne	r0, #0
 8000650:	bd30      	popne	{r4, r5, pc}
 8000652:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000656:	d105      	bne.n	8000664 <__adddf3+0x230>
 8000658:	0040      	lsls	r0, r0, #1
 800065a:	4149      	adcs	r1, r1
 800065c:	bf28      	it	cs
 800065e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000668:	bf3c      	itt	cc
 800066a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066e:	bd30      	popcc	{r4, r5, pc}
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000678:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800067c:	f04f 0000 	mov.w	r0, #0
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000686:	bf1a      	itte	ne
 8000688:	4619      	movne	r1, r3
 800068a:	4610      	movne	r0, r2
 800068c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000690:	bf1c      	itt	ne
 8000692:	460b      	movne	r3, r1
 8000694:	4602      	movne	r2, r0
 8000696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069a:	bf06      	itte	eq
 800069c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a0:	ea91 0f03 	teqeq	r1, r3
 80006a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop

080006ac <__aeabi_ui2d>:
 80006ac:	f090 0f00 	teq	r0, #0
 80006b0:	bf04      	itt	eq
 80006b2:	2100      	moveq	r1, #0
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c0:	f04f 0500 	mov.w	r5, #0
 80006c4:	f04f 0100 	mov.w	r1, #0
 80006c8:	e750      	b.n	800056c <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_i2d>:
 80006cc:	f090 0f00 	teq	r0, #0
 80006d0:	bf04      	itt	eq
 80006d2:	2100      	moveq	r1, #0
 80006d4:	4770      	bxeq	lr
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e4:	bf48      	it	mi
 80006e6:	4240      	negmi	r0, r0
 80006e8:	f04f 0100 	mov.w	r1, #0
 80006ec:	e73e      	b.n	800056c <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2d>:
 80006f0:	0042      	lsls	r2, r0, #1
 80006f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fe:	bf1f      	itttt	ne
 8000700:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000708:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800070c:	4770      	bxne	lr
 800070e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000712:	bf08      	it	eq
 8000714:	4770      	bxeq	lr
 8000716:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071a:	bf04      	itt	eq
 800071c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	e71c      	b.n	800056c <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_ul2d>:
 8000734:	ea50 0201 	orrs.w	r2, r0, r1
 8000738:	bf08      	it	eq
 800073a:	4770      	bxeq	lr
 800073c:	b530      	push	{r4, r5, lr}
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	e00a      	b.n	800075a <__aeabi_l2d+0x16>

08000744 <__aeabi_l2d>:
 8000744:	ea50 0201 	orrs.w	r2, r0, r1
 8000748:	bf08      	it	eq
 800074a:	4770      	bxeq	lr
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000752:	d502      	bpl.n	800075a <__aeabi_l2d+0x16>
 8000754:	4240      	negs	r0, r0
 8000756:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000762:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000766:	f43f aed8 	beq.w	800051a <__adddf3+0xe6>
 800076a:	f04f 0203 	mov.w	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077a:	bf18      	it	ne
 800077c:	3203      	addne	r2, #3
 800077e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	fa00 fc03 	lsl.w	ip, r0, r3
 800078a:	fa20 f002 	lsr.w	r0, r0, r2
 800078e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000792:	ea40 000e 	orr.w	r0, r0, lr
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	4414      	add	r4, r2
 800079c:	e6bd      	b.n	800051a <__adddf3+0xe6>
 800079e:	bf00      	nop

080007a0 <__gedf2>:
 80007a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a4:	e006      	b.n	80007b4 <__cmpdf2+0x4>
 80007a6:	bf00      	nop

080007a8 <__ledf2>:
 80007a8:	f04f 0c01 	mov.w	ip, #1
 80007ac:	e002      	b.n	80007b4 <__cmpdf2+0x4>
 80007ae:	bf00      	nop

080007b0 <__cmpdf2>:
 80007b0:	f04f 0c01 	mov.w	ip, #1
 80007b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c4:	bf18      	it	ne
 80007c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ca:	d01b      	beq.n	8000804 <__cmpdf2+0x54>
 80007cc:	b001      	add	sp, #4
 80007ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d2:	bf0c      	ite	eq
 80007d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007d8:	ea91 0f03 	teqne	r1, r3
 80007dc:	bf02      	ittt	eq
 80007de:	ea90 0f02 	teqeq	r0, r2
 80007e2:	2000      	moveq	r0, #0
 80007e4:	4770      	bxeq	lr
 80007e6:	f110 0f00 	cmn.w	r0, #0
 80007ea:	ea91 0f03 	teq	r1, r3
 80007ee:	bf58      	it	pl
 80007f0:	4299      	cmppl	r1, r3
 80007f2:	bf08      	it	eq
 80007f4:	4290      	cmpeq	r0, r2
 80007f6:	bf2c      	ite	cs
 80007f8:	17d8      	asrcs	r0, r3, #31
 80007fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007fe:	f040 0001 	orr.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800080c:	d102      	bne.n	8000814 <__cmpdf2+0x64>
 800080e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000812:	d107      	bne.n	8000824 <__cmpdf2+0x74>
 8000814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800081c:	d1d6      	bne.n	80007cc <__cmpdf2+0x1c>
 800081e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000822:	d0d3      	beq.n	80007cc <__cmpdf2+0x1c>
 8000824:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <__aeabi_cdrcmple>:
 800082c:	4684      	mov	ip, r0
 800082e:	4610      	mov	r0, r2
 8000830:	4662      	mov	r2, ip
 8000832:	468c      	mov	ip, r1
 8000834:	4619      	mov	r1, r3
 8000836:	4663      	mov	r3, ip
 8000838:	e000      	b.n	800083c <__aeabi_cdcmpeq>
 800083a:	bf00      	nop

0800083c <__aeabi_cdcmpeq>:
 800083c:	b501      	push	{r0, lr}
 800083e:	f7ff ffb7 	bl	80007b0 <__cmpdf2>
 8000842:	2800      	cmp	r0, #0
 8000844:	bf48      	it	mi
 8000846:	f110 0f00 	cmnmi.w	r0, #0
 800084a:	bd01      	pop	{r0, pc}

0800084c <__aeabi_dcmpeq>:
 800084c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000850:	f7ff fff4 	bl	800083c <__aeabi_cdcmpeq>
 8000854:	bf0c      	ite	eq
 8000856:	2001      	moveq	r0, #1
 8000858:	2000      	movne	r0, #0
 800085a:	f85d fb08 	ldr.w	pc, [sp], #8
 800085e:	bf00      	nop

08000860 <__aeabi_dcmplt>:
 8000860:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000864:	f7ff ffea 	bl	800083c <__aeabi_cdcmpeq>
 8000868:	bf34      	ite	cc
 800086a:	2001      	movcc	r0, #1
 800086c:	2000      	movcs	r0, #0
 800086e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000872:	bf00      	nop

08000874 <__aeabi_dcmple>:
 8000874:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000878:	f7ff ffe0 	bl	800083c <__aeabi_cdcmpeq>
 800087c:	bf94      	ite	ls
 800087e:	2001      	movls	r0, #1
 8000880:	2000      	movhi	r0, #0
 8000882:	f85d fb08 	ldr.w	pc, [sp], #8
 8000886:	bf00      	nop

08000888 <__aeabi_dcmpge>:
 8000888:	f84d ed08 	str.w	lr, [sp, #-8]!
 800088c:	f7ff ffce 	bl	800082c <__aeabi_cdrcmple>
 8000890:	bf94      	ite	ls
 8000892:	2001      	movls	r0, #1
 8000894:	2000      	movhi	r0, #0
 8000896:	f85d fb08 	ldr.w	pc, [sp], #8
 800089a:	bf00      	nop

0800089c <__aeabi_dcmpgt>:
 800089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a0:	f7ff ffc4 	bl	800082c <__aeabi_cdrcmple>
 80008a4:	bf34      	ite	cc
 80008a6:	2001      	movcc	r0, #1
 80008a8:	2000      	movcs	r0, #0
 80008aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ae:	bf00      	nop

080008b0 <__aeabi_uldivmod>:
 80008b0:	b953      	cbnz	r3, 80008c8 <__aeabi_uldivmod+0x18>
 80008b2:	b94a      	cbnz	r2, 80008c8 <__aeabi_uldivmod+0x18>
 80008b4:	2900      	cmp	r1, #0
 80008b6:	bf08      	it	eq
 80008b8:	2800      	cmpeq	r0, #0
 80008ba:	bf1c      	itt	ne
 80008bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008c4:	f000 b970 	b.w	8000ba8 <__aeabi_idiv0>
 80008c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80008cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008d0:	f000 f806 	bl	80008e0 <__udivmoddi4>
 80008d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008dc:	b004      	add	sp, #16
 80008de:	4770      	bx	lr

080008e0 <__udivmoddi4>:
 80008e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e4:	9e08      	ldr	r6, [sp, #32]
 80008e6:	460d      	mov	r5, r1
 80008e8:	4604      	mov	r4, r0
 80008ea:	460f      	mov	r7, r1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d14a      	bne.n	8000986 <__udivmoddi4+0xa6>
 80008f0:	428a      	cmp	r2, r1
 80008f2:	4694      	mov	ip, r2
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0xe2>
 80008f6:	fab2 f382 	clz	r3, r2
 80008fa:	b143      	cbz	r3, 800090e <__udivmoddi4+0x2e>
 80008fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000900:	f1c3 0220 	rsb	r2, r3, #32
 8000904:	409f      	lsls	r7, r3
 8000906:	fa20 f202 	lsr.w	r2, r0, r2
 800090a:	4317      	orrs	r7, r2
 800090c:	409c      	lsls	r4, r3
 800090e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000912:	fa1f f58c 	uxth.w	r5, ip
 8000916:	fbb7 f1fe 	udiv	r1, r7, lr
 800091a:	0c22      	lsrs	r2, r4, #16
 800091c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000920:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000924:	fb01 f005 	mul.w	r0, r1, r5
 8000928:	4290      	cmp	r0, r2
 800092a:	d90a      	bls.n	8000942 <__udivmoddi4+0x62>
 800092c:	eb1c 0202 	adds.w	r2, ip, r2
 8000930:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000934:	f080 811c 	bcs.w	8000b70 <__udivmoddi4+0x290>
 8000938:	4290      	cmp	r0, r2
 800093a:	f240 8119 	bls.w	8000b70 <__udivmoddi4+0x290>
 800093e:	3902      	subs	r1, #2
 8000940:	4462      	add	r2, ip
 8000942:	1a12      	subs	r2, r2, r0
 8000944:	b2a4      	uxth	r4, r4
 8000946:	fbb2 f0fe 	udiv	r0, r2, lr
 800094a:	fb0e 2210 	mls	r2, lr, r0, r2
 800094e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000952:	fb00 f505 	mul.w	r5, r0, r5
 8000956:	42a5      	cmp	r5, r4
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x90>
 800095a:	eb1c 0404 	adds.w	r4, ip, r4
 800095e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000962:	f080 8107 	bcs.w	8000b74 <__udivmoddi4+0x294>
 8000966:	42a5      	cmp	r5, r4
 8000968:	f240 8104 	bls.w	8000b74 <__udivmoddi4+0x294>
 800096c:	4464      	add	r4, ip
 800096e:	3802      	subs	r0, #2
 8000970:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000974:	1b64      	subs	r4, r4, r5
 8000976:	2100      	movs	r1, #0
 8000978:	b11e      	cbz	r6, 8000982 <__udivmoddi4+0xa2>
 800097a:	40dc      	lsrs	r4, r3
 800097c:	2300      	movs	r3, #0
 800097e:	e9c6 4300 	strd	r4, r3, [r6]
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d908      	bls.n	800099c <__udivmoddi4+0xbc>
 800098a:	2e00      	cmp	r6, #0
 800098c:	f000 80ed 	beq.w	8000b6a <__udivmoddi4+0x28a>
 8000990:	2100      	movs	r1, #0
 8000992:	e9c6 0500 	strd	r0, r5, [r6]
 8000996:	4608      	mov	r0, r1
 8000998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099c:	fab3 f183 	clz	r1, r3
 80009a0:	2900      	cmp	r1, #0
 80009a2:	d149      	bne.n	8000a38 <__udivmoddi4+0x158>
 80009a4:	42ab      	cmp	r3, r5
 80009a6:	d302      	bcc.n	80009ae <__udivmoddi4+0xce>
 80009a8:	4282      	cmp	r2, r0
 80009aa:	f200 80f8 	bhi.w	8000b9e <__udivmoddi4+0x2be>
 80009ae:	1a84      	subs	r4, r0, r2
 80009b0:	eb65 0203 	sbc.w	r2, r5, r3
 80009b4:	2001      	movs	r0, #1
 80009b6:	4617      	mov	r7, r2
 80009b8:	2e00      	cmp	r6, #0
 80009ba:	d0e2      	beq.n	8000982 <__udivmoddi4+0xa2>
 80009bc:	e9c6 4700 	strd	r4, r7, [r6]
 80009c0:	e7df      	b.n	8000982 <__udivmoddi4+0xa2>
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xe6>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f382 	clz	r3, r2
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f040 8090 	bne.w	8000af0 <__udivmoddi4+0x210>
 80009d0:	1a8a      	subs	r2, r1, r2
 80009d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d6:	fa1f fe8c 	uxth.w	lr, ip
 80009da:	2101      	movs	r1, #1
 80009dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80009e0:	fb07 2015 	mls	r0, r7, r5, r2
 80009e4:	0c22      	lsrs	r2, r4, #16
 80009e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ea:	fb0e f005 	mul.w	r0, lr, r5
 80009ee:	4290      	cmp	r0, r2
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x124>
 80009f2:	eb1c 0202 	adds.w	r2, ip, r2
 80009f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x122>
 80009fc:	4290      	cmp	r0, r2
 80009fe:	f200 80cb 	bhi.w	8000b98 <__udivmoddi4+0x2b8>
 8000a02:	4645      	mov	r5, r8
 8000a04:	1a12      	subs	r2, r2, r0
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a0c:	fb07 2210 	mls	r2, r7, r0, r2
 8000a10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a14:	fb0e fe00 	mul.w	lr, lr, r0
 8000a18:	45a6      	cmp	lr, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x14e>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a24:	d202      	bcs.n	8000a2c <__udivmoddi4+0x14c>
 8000a26:	45a6      	cmp	lr, r4
 8000a28:	f200 80bb 	bhi.w	8000ba2 <__udivmoddi4+0x2c2>
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	eba4 040e 	sub.w	r4, r4, lr
 8000a32:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a36:	e79f      	b.n	8000978 <__udivmoddi4+0x98>
 8000a38:	f1c1 0720 	rsb	r7, r1, #32
 8000a3c:	408b      	lsls	r3, r1
 8000a3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a46:	fa05 f401 	lsl.w	r4, r5, r1
 8000a4a:	fa20 f307 	lsr.w	r3, r0, r7
 8000a4e:	40fd      	lsrs	r5, r7
 8000a50:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a54:	4323      	orrs	r3, r4
 8000a56:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	fb09 5518 	mls	r5, r9, r8, r5
 8000a62:	0c1c      	lsrs	r4, r3, #16
 8000a64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a68:	fb08 f50e 	mul.w	r5, r8, lr
 8000a6c:	42a5      	cmp	r5, r4
 8000a6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a72:	fa00 f001 	lsl.w	r0, r0, r1
 8000a76:	d90b      	bls.n	8000a90 <__udivmoddi4+0x1b0>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a80:	f080 8088 	bcs.w	8000b94 <__udivmoddi4+0x2b4>
 8000a84:	42a5      	cmp	r5, r4
 8000a86:	f240 8085 	bls.w	8000b94 <__udivmoddi4+0x2b4>
 8000a8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000a8e:	4464      	add	r4, ip
 8000a90:	1b64      	subs	r4, r4, r5
 8000a92:	b29d      	uxth	r5, r3
 8000a94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a98:	fb09 4413 	mls	r4, r9, r3, r4
 8000a9c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000aa0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000aa4:	45a6      	cmp	lr, r4
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0x1da>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ab0:	d26c      	bcs.n	8000b8c <__udivmoddi4+0x2ac>
 8000ab2:	45a6      	cmp	lr, r4
 8000ab4:	d96a      	bls.n	8000b8c <__udivmoddi4+0x2ac>
 8000ab6:	3b02      	subs	r3, #2
 8000ab8:	4464      	add	r4, ip
 8000aba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000abe:	fba3 9502 	umull	r9, r5, r3, r2
 8000ac2:	eba4 040e 	sub.w	r4, r4, lr
 8000ac6:	42ac      	cmp	r4, r5
 8000ac8:	46c8      	mov	r8, r9
 8000aca:	46ae      	mov	lr, r5
 8000acc:	d356      	bcc.n	8000b7c <__udivmoddi4+0x29c>
 8000ace:	d053      	beq.n	8000b78 <__udivmoddi4+0x298>
 8000ad0:	b156      	cbz	r6, 8000ae8 <__udivmoddi4+0x208>
 8000ad2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ad6:	eb64 040e 	sbc.w	r4, r4, lr
 8000ada:	fa04 f707 	lsl.w	r7, r4, r7
 8000ade:	40ca      	lsrs	r2, r1
 8000ae0:	40cc      	lsrs	r4, r1
 8000ae2:	4317      	orrs	r7, r2
 8000ae4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	f1c3 0120 	rsb	r1, r3, #32
 8000af4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000af8:	fa20 f201 	lsr.w	r2, r0, r1
 8000afc:	fa25 f101 	lsr.w	r1, r5, r1
 8000b00:	409d      	lsls	r5, r3
 8000b02:	432a      	orrs	r2, r5
 8000b04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b08:	fa1f fe8c 	uxth.w	lr, ip
 8000b0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b10:	fb07 1510 	mls	r5, r7, r0, r1
 8000b14:	0c11      	lsrs	r1, r2, #16
 8000b16:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b1a:	fb00 f50e 	mul.w	r5, r0, lr
 8000b1e:	428d      	cmp	r5, r1
 8000b20:	fa04 f403 	lsl.w	r4, r4, r3
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x258>
 8000b26:	eb1c 0101 	adds.w	r1, ip, r1
 8000b2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b2e:	d22f      	bcs.n	8000b90 <__udivmoddi4+0x2b0>
 8000b30:	428d      	cmp	r5, r1
 8000b32:	d92d      	bls.n	8000b90 <__udivmoddi4+0x2b0>
 8000b34:	3802      	subs	r0, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	1b49      	subs	r1, r1, r5
 8000b3a:	b292      	uxth	r2, r2
 8000b3c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b40:	fb07 1115 	mls	r1, r7, r5, r1
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	fb05 f10e 	mul.w	r1, r5, lr
 8000b4c:	4291      	cmp	r1, r2
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x282>
 8000b50:	eb1c 0202 	adds.w	r2, ip, r2
 8000b54:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b58:	d216      	bcs.n	8000b88 <__udivmoddi4+0x2a8>
 8000b5a:	4291      	cmp	r1, r2
 8000b5c:	d914      	bls.n	8000b88 <__udivmoddi4+0x2a8>
 8000b5e:	3d02      	subs	r5, #2
 8000b60:	4462      	add	r2, ip
 8000b62:	1a52      	subs	r2, r2, r1
 8000b64:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b68:	e738      	b.n	80009dc <__udivmoddi4+0xfc>
 8000b6a:	4631      	mov	r1, r6
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e708      	b.n	8000982 <__udivmoddi4+0xa2>
 8000b70:	4639      	mov	r1, r7
 8000b72:	e6e6      	b.n	8000942 <__udivmoddi4+0x62>
 8000b74:	4610      	mov	r0, r2
 8000b76:	e6fb      	b.n	8000970 <__udivmoddi4+0x90>
 8000b78:	4548      	cmp	r0, r9
 8000b7a:	d2a9      	bcs.n	8000ad0 <__udivmoddi4+0x1f0>
 8000b7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000b80:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b84:	3b01      	subs	r3, #1
 8000b86:	e7a3      	b.n	8000ad0 <__udivmoddi4+0x1f0>
 8000b88:	4645      	mov	r5, r8
 8000b8a:	e7ea      	b.n	8000b62 <__udivmoddi4+0x282>
 8000b8c:	462b      	mov	r3, r5
 8000b8e:	e794      	b.n	8000aba <__udivmoddi4+0x1da>
 8000b90:	4640      	mov	r0, r8
 8000b92:	e7d1      	b.n	8000b38 <__udivmoddi4+0x258>
 8000b94:	46d0      	mov	r8, sl
 8000b96:	e77b      	b.n	8000a90 <__udivmoddi4+0x1b0>
 8000b98:	3d02      	subs	r5, #2
 8000b9a:	4462      	add	r2, ip
 8000b9c:	e732      	b.n	8000a04 <__udivmoddi4+0x124>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e70a      	b.n	80009b8 <__udivmoddi4+0xd8>
 8000ba2:	4464      	add	r4, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e742      	b.n	8000a2e <__udivmoddi4+0x14e>

08000ba8 <__aeabi_idiv0>:
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <playnote>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void playnote(struct note note_playing){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b098      	sub	sp, #96	; 0x60
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	e883 0003 	stmia.w	r3, {r0, r1}
	// copied by declaration of MX_TIM1_Init

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2220      	movs	r2, #32
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fa29 	bl	8003044 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim3.Instance = TIM3;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <playnote+0x8c>)
 8000bf4:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <playnote+0x90>)
 8000bf6:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 99;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <playnote+0x8c>)
 8000bfa:	2263      	movs	r2, #99	; 0x63
 8000bfc:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <playnote+0x8c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = note_playing.tone/2;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	0fda      	lsrs	r2, r3, #31
 8000c08:	4413      	add	r3, r2
 8000c0a:	105b      	asrs	r3, r3, #1
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <playnote+0x8c>)
 8000c10:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <playnote+0x8c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <playnote+0x8c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <playnote+0x8c>)
 8000c20:	f001 fad0 	bl	80021c4 <HAL_TIM_Base_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <playnote+0x82>
	  {
		  Error_Handler();
 8000c2a:	f000 f9db 	bl	8000fe4 <Error_Handler>
	  }
}
 8000c2e:	bf00      	nop
 8000c30:	3760      	adds	r7, #96	; 0x60
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000e8 	.word	0x200000e8
 8000c3c:	40000400 	.word	0x40000400

08000c40 <playsong>:

void playsong(){
 8000c40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
	int length=sizeof(score)/sizeof(score[0]);
 8000c48:	2318      	movs	r3, #24
 8000c4a:	603b      	str	r3, [r7, #0]
	t=0;
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <playsong+0xc0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
	for(int i=0; i<length;i++){
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	e046      	b.n	8000ce6 <playsong+0xa6>
		playnote(score[i]);
 8000c58:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <playsong+0xc4>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c64:	f7ff ffa2 	bl	8000bac <playnote>
		while(t<((TEMPO*score[i].duration)*(F_OSC/((1+score[i].tone/2)*(100)))));
 8000c68:	bf00      	nop
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <playsong+0xc0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd2c 	bl	80006cc <__aeabi_i2d>
 8000c74:	4604      	mov	r4, r0
 8000c76:	460d      	mov	r5, r1
 8000c78:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <playsong+0xc4>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4413      	add	r3, r2
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fd22 	bl	80006cc <__aeabi_i2d>
 8000c88:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <playsong+0xc8>)
 8000c8e:	f7ff faa1 	bl	80001d4 <__aeabi_dmul>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4690      	mov	r8, r2
 8000c98:	4699      	mov	r9, r3
 8000c9a:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <playsong+0xc4>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ca2:	0fda      	lsrs	r2, r3, #31
 8000ca4:	4413      	add	r3, r2
 8000ca6:	105b      	asrs	r3, r3, #1
 8000ca8:	3301      	adds	r3, #1
 8000caa:	2264      	movs	r2, #100	; 0x64
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <playsong+0xcc>)
 8000cb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fd08 	bl	80006cc <__aeabi_i2d>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4640      	mov	r0, r8
 8000cc2:	4649      	mov	r1, r9
 8000cc4:	f7ff fa86 	bl	80001d4 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	f7ff fdc6 	bl	8000860 <__aeabi_dcmplt>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1c7      	bne.n	8000c6a <playsong+0x2a>
		t=0;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <playsong+0xc0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
	for(int i=0; i<length;i++){
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	dbb4      	blt.n	8000c58 <playsong+0x18>
	}

	HAL_TIM_Base_Stop_IT(&htim3);
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <playsong+0xd0>)
 8000cf0:	f001 fb1a 	bl	8002328 <HAL_TIM_Base_Stop_IT>

}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000174 	.word	0x20000174
 8000d04:	20000000 	.word	0x20000000
 8000d08:	3fb33333 	.word	0x3fb33333
 8000d0c:	0501bd00 	.word	0x0501bd00
 8000d10:	200000e8 	.word	0x200000e8

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f000 fa80 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f80e 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d20:	f000 f8f0 	bl	8000f04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d24:	f000 f8c4 	bl	8000eb0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d28:	f000 f874 	bl	8000e14 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <main+0x24>)
 8000d2e:	f001 fa99 	bl	8002264 <HAL_TIM_Base_Start_IT>
  playsong();
 8000d32:	f7ff ff85 	bl	8000c40 <playsong>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <main+0x22>
 8000d38:	200000e8 	.word	0x200000e8

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	2230      	movs	r2, #48	; 0x30
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 f97a 	bl	8003044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	4a28      	ldr	r2, [pc, #160]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da4:	2310      	movs	r3, #16
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da8:	2302      	movs	r3, #2
 8000daa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000db0:	2310      	movs	r3, #16
 8000db2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000db4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000db8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	f107 0320 	add.w	r3, r7, #32
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fd64 	bl	8001894 <HAL_RCC_OscConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dd2:	f000 f907 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2102      	movs	r1, #2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 ffc6 	bl	8001d84 <HAL_RCC_ClockConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000dfe:	f000 f8f1 	bl	8000fe4 <Error_Handler>
  }
}
 8000e02:	bf00      	nop
 8000e04:	3750      	adds	r7, #80	; 0x50
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40007000 	.word	0x40007000

08000e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <MX_TIM3_Init+0x94>)
 8000e32:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <MX_TIM3_Init+0x98>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <MX_TIM3_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_TIM3_Init+0x94>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <MX_TIM3_Init+0x94>)
 8000e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <MX_TIM3_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MX_TIM3_Init+0x94>)
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <MX_TIM3_Init+0x94>)
 8000e58:	f001 f9b4 	bl	80021c4 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e62:	f000 f8bf 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <MX_TIM3_Init+0x94>)
 8000e74:	f001 fb8f 	bl	8002596 <HAL_TIM_ConfigClockSource>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e7e:	f000 f8b1 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <MX_TIM3_Init+0x94>)
 8000e90:	f001 fd94 	bl	80029bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e9a:	f000 f8a3 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000e8 	.word	0x200000e8
 8000eac:	40000400 	.word	0x40000400

08000eb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <MX_USART2_UART_Init+0x50>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ee8:	f001 fdea 	bl	8002ac0 <HAL_UART_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef2:	f000 f877 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000130 	.word	0x20000130
 8000f00:	40004400 	.word	0x40004400

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a2d      	ldr	r2, [pc, #180]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000f90:	4812      	ldr	r0, [pc, #72]	; (8000fdc <MX_GPIO_Init+0xd8>)
 8000f92:	f000 fc4b 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_GPIO_Init+0xdc>)
 8000fae:	f000 fab9 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000fb2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_GPIO_Init+0xd8>)
 8000fcc:	f000 faaa 	bl	8001524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_MspInit+0x4c>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_MspInit+0x4c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800102e:	2007      	movs	r0, #7
 8001030:	f000 fa36 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_TIM_Base_MspInit+0x48>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d115      	bne.n	800107e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_TIM_Base_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_TIM_Base_MspInit+0x4c>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_TIM_Base_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	201d      	movs	r0, #29
 8001074:	f000 fa1f 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001078:	201d      	movs	r0, #29
 800107a:	f000 fa38 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40000400 	.word	0x40000400
 800108c:	40023800 	.word	0x40023800

08001090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_UART_MspInit+0x84>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d12b      	bne.n	800110a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010ea:	230c      	movs	r3, #12
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010fa:	2307      	movs	r3, #7
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_UART_MspInit+0x8c>)
 8001106:	f000 fa0d 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40004400 	.word	0x40004400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f8a8 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <TIM3_IRQHandler+0x24>)
 800117a:	f001 f904 	bl	8002386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800117e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <TIM3_IRQHandler+0x28>)
 8001184:	f000 fb6b 	bl	800185e <HAL_GPIO_TogglePin>
t++;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <TIM3_IRQHandler+0x2c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <TIM3_IRQHandler+0x2c>)
 8001190:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000e8 	.word	0x200000e8
 800119c:	40020000 	.word	0x40020000
 80011a0:	20000174 	.word	0x20000174

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f001 ff2d 	bl	8003054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fd8b 	bl	8000d14 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001200:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 800120c:	080030dc 	.word	0x080030dc
  ldr r2, =_sbss
 8001210:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001214:	2000017c 	.word	0x2000017c

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f92b 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fece 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f943 	bl	800150a <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f000 f90b 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000c0 	.word	0x200000c0
 80012b8:	200000c8 	.word	0x200000c8
 80012bc:	200000c4 	.word	0x200000c4

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	200000c8 	.word	0x200000c8
 80012e4:	20000178 	.word	0x20000178

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000178 	.word	0x20000178

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff3e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff8e 	bl	80013f4 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff31 	bl	8001364 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e159      	b.n	80017f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 8148 	bne.w	80017ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	2b02      	cmp	r3, #2
 8001574:	d130      	bne.n	80015d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d017      	beq.n	8001614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d123      	bne.n	8001668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	69b9      	ldr	r1, [r7, #24]
 8001664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0203 	and.w	r2, r3, #3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80a2 	beq.w	80017ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_GPIO_Init+0x2e8>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a56      	ldr	r2, [pc, #344]	; (800180c <HAL_GPIO_Init+0x2e8>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b54      	ldr	r3, [pc, #336]	; (800180c <HAL_GPIO_Init+0x2e8>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c6:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_GPIO_Init+0x2ec>)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a49      	ldr	r2, [pc, #292]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d019      	beq.n	8001726 <HAL_GPIO_Init+0x202>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a48      	ldr	r2, [pc, #288]	; (8001818 <HAL_GPIO_Init+0x2f4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0x1fe>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a47      	ldr	r2, [pc, #284]	; (800181c <HAL_GPIO_Init+0x2f8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00d      	beq.n	800171e <HAL_GPIO_Init+0x1fa>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a46      	ldr	r2, [pc, #280]	; (8001820 <HAL_GPIO_Init+0x2fc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x1f6>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a45      	ldr	r2, [pc, #276]	; (8001824 <HAL_GPIO_Init+0x300>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_GPIO_Init+0x1f2>
 8001712:	2304      	movs	r3, #4
 8001714:	e008      	b.n	8001728 <HAL_GPIO_Init+0x204>
 8001716:	2307      	movs	r3, #7
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x204>
 800171a:	2303      	movs	r3, #3
 800171c:	e004      	b.n	8001728 <HAL_GPIO_Init+0x204>
 800171e:	2302      	movs	r3, #2
 8001720:	e002      	b.n	8001728 <HAL_GPIO_Init+0x204>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x204>
 8001726:	2300      	movs	r3, #0
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	f002 0203 	and.w	r2, r2, #3
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	4093      	lsls	r3, r2
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001738:	4935      	ldr	r1, [pc, #212]	; (8001810 <HAL_GPIO_Init+0x2ec>)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	3302      	adds	r3, #2
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001746:	4b38      	ldr	r3, [pc, #224]	; (8001828 <HAL_GPIO_Init+0x304>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176a:	4a2f      	ldr	r2, [pc, #188]	; (8001828 <HAL_GPIO_Init+0x304>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_GPIO_Init+0x304>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001794:	4a24      	ldr	r2, [pc, #144]	; (8001828 <HAL_GPIO_Init+0x304>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <HAL_GPIO_Init+0x304>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017be:	4a1a      	ldr	r2, [pc, #104]	; (8001828 <HAL_GPIO_Init+0x304>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_GPIO_Init+0x304>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_GPIO_Init+0x304>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3301      	adds	r3, #1
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	f67f aea2 	bls.w	8001540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40013800 	.word	0x40013800
 8001814:	40020000 	.word	0x40020000
 8001818:	40020400 	.word	0x40020400
 800181c:	40020800 	.word	0x40020800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021000 	.word	0x40021000
 8001828:	40013c00 	.word	0x40013c00

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001848:	e003      	b.n	8001852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001870:	887a      	ldrh	r2, [r7, #2]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	041a      	lsls	r2, r3, #16
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43d9      	mvns	r1, r3
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	400b      	ands	r3, r1
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e267      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d075      	beq.n	800199e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b2:	4b88      	ldr	r3, [pc, #544]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d00c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018be:	4b85      	ldr	r3, [pc, #532]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d112      	bne.n	80018f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	4b82      	ldr	r3, [pc, #520]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d6:	d10b      	bne.n	80018f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d05b      	beq.n	800199c <HAL_RCC_OscConfig+0x108>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d157      	bne.n	800199c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e242      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d106      	bne.n	8001908 <HAL_RCC_OscConfig+0x74>
 80018fa:	4b76      	ldr	r3, [pc, #472]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a75      	ldr	r2, [pc, #468]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e01d      	b.n	8001944 <HAL_RCC_OscConfig+0xb0>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x98>
 8001912:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6f      	ldr	r2, [pc, #444]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6c      	ldr	r2, [pc, #432]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0xb0>
 800192c:	4b69      	ldr	r3, [pc, #420]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a68      	ldr	r2, [pc, #416]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a65      	ldr	r2, [pc, #404]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fccc 	bl	80012e8 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fcc8 	bl	80012e8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e207      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b5b      	ldr	r3, [pc, #364]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0xc0>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fcb8 	bl	80012e8 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fcb4 	bl	80012e8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1f3      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0xe8>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019aa:	4b4a      	ldr	r3, [pc, #296]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d11c      	bne.n	80019fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c2:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_RCC_OscConfig+0x152>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1c7      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4937      	ldr	r1, [pc, #220]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	e03a      	b.n	8001a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a04:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <HAL_RCC_OscConfig+0x244>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fc6d 	bl	80012e8 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fc69 	bl	80012e8 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1a8      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4925      	ldr	r1, [pc, #148]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_RCC_OscConfig+0x244>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc4c 	bl	80012e8 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff fc48 	bl	80012e8 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e187      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d036      	beq.n	8001aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d016      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_RCC_OscConfig+0x248>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fc2c 	bl	80012e8 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff fc28 	bl	80012e8 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e167      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x200>
 8001ab2:	e01b      	b.n	8001aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCC_OscConfig+0x248>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fc15 	bl	80012e8 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	e00e      	b.n	8001ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fc11 	bl	80012e8 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d907      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e150      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	42470000 	.word	0x42470000
 8001adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ea      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8097 	beq.w	8001c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10f      	bne.n	8001b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b7d      	ldr	r3, [pc, #500]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a7c      	ldr	r2, [pc, #496]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	4b77      	ldr	r3, [pc, #476]	; (8001d08 <HAL_RCC_OscConfig+0x474>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d118      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b36:	4b74      	ldr	r3, [pc, #464]	; (8001d08 <HAL_RCC_OscConfig+0x474>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a73      	ldr	r2, [pc, #460]	; (8001d08 <HAL_RCC_OscConfig+0x474>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fbd1 	bl	80012e8 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4a:	f7ff fbcd 	bl	80012e8 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e10c      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <HAL_RCC_OscConfig+0x474>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2ea>
 8001b70:	4b64      	ldr	r3, [pc, #400]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a63      	ldr	r2, [pc, #396]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7c:	e01c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x324>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x30c>
 8001b86:	4b5f      	ldr	r3, [pc, #380]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a5e      	ldr	r2, [pc, #376]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	4a5b      	ldr	r2, [pc, #364]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x324>
 8001ba0:	4b58      	ldr	r3, [pc, #352]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a57      	ldr	r2, [pc, #348]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bac:	4b55      	ldr	r3, [pc, #340]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a54      	ldr	r2, [pc, #336]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	f023 0304 	bic.w	r3, r3, #4
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d015      	beq.n	8001bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fb92 	bl	80012e8 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb8e 	bl	80012e8 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0cb      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0ee      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x334>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff fb7c 	bl	80012e8 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fb78 	bl	80012e8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e0b5      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0a:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ee      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1c:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a1 	beq.w	8001d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c32:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d05c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d141      	bne.n	8001cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <HAL_RCC_OscConfig+0x478>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb4c 	bl	80012e8 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fb48 	bl	80012e8 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e087      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c66:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	019b      	lsls	r3, r3, #6
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	491b      	ldr	r1, [pc, #108]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x478>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fb21 	bl	80012e8 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7ff fb1d 	bl	80012e8 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e05c      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x416>
 8001cc8:	e054      	b.n	8001d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_RCC_OscConfig+0x478>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fb0a 	bl	80012e8 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff fb06 	bl	80012e8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e045      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x444>
 8001cf6:	e03d      	b.n	8001d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e038      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x4ec>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d028      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d121      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d11a      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d40:	4013      	ands	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d111      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0cc      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d90c      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d044      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d119      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e067      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f023 0203 	bic.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4934      	ldr	r1, [pc, #208]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7ff fa38 	bl	80012e8 <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7ff fa34 	bl	80012e8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e04f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d20c      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f998 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	080030b4 	.word	0x080030b4
 8001f48:	200000c0 	.word	0x200000c0
 8001f4c:	200000c4 	.word	0x200000c4

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f54:	b094      	sub	sp, #80	; 0x50
 8001f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f60:	2300      	movs	r3, #0
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f68:	4b79      	ldr	r3, [pc, #484]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d00d      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x40>
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	f200 80e1 	bhi.w	800213c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x34>
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f82:	e0db      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f84:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f88:	e0db      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8a:	4b73      	ldr	r3, [pc, #460]	; (8002158 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f8e:	e0d8      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f90:	4b6f      	ldr	r3, [pc, #444]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9a:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d063      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	099b      	lsrs	r3, r3, #6
 8001fac:	2200      	movs	r2, #0
 8001fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fba:	2300      	movs	r3, #0
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001fbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fc2:	4622      	mov	r2, r4
 8001fc4:	462b      	mov	r3, r5
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	0159      	lsls	r1, r3, #5
 8001fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd4:	0150      	lsls	r0, r2, #5
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4621      	mov	r1, r4
 8001fdc:	1a51      	subs	r1, r2, r1
 8001fde:	6139      	str	r1, [r7, #16]
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ff4:	4659      	mov	r1, fp
 8001ff6:	018b      	lsls	r3, r1, #6
 8001ff8:	4651      	mov	r1, sl
 8001ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ffe:	4651      	mov	r1, sl
 8002000:	018a      	lsls	r2, r1, #6
 8002002:	4651      	mov	r1, sl
 8002004:	ebb2 0801 	subs.w	r8, r2, r1
 8002008:	4659      	mov	r1, fp
 800200a:	eb63 0901 	sbc.w	r9, r3, r1
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800201a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800201e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002022:	4690      	mov	r8, r2
 8002024:	4699      	mov	r9, r3
 8002026:	4623      	mov	r3, r4
 8002028:	eb18 0303 	adds.w	r3, r8, r3
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	462b      	mov	r3, r5
 8002030:	eb49 0303 	adc.w	r3, r9, r3
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002042:	4629      	mov	r1, r5
 8002044:	024b      	lsls	r3, r1, #9
 8002046:	4621      	mov	r1, r4
 8002048:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800204c:	4621      	mov	r1, r4
 800204e:	024a      	lsls	r2, r1, #9
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002056:	2200      	movs	r2, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
 800205a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800205c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002060:	f7fe fc26 	bl	80008b0 <__aeabi_uldivmod>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4613      	mov	r3, r2
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800206c:	e058      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	2200      	movs	r2, #0
 8002076:	4618      	mov	r0, r3
 8002078:	4611      	mov	r1, r2
 800207a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800207e:	623b      	str	r3, [r7, #32]
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002088:	4642      	mov	r2, r8
 800208a:	464b      	mov	r3, r9
 800208c:	f04f 0000 	mov.w	r0, #0
 8002090:	f04f 0100 	mov.w	r1, #0
 8002094:	0159      	lsls	r1, r3, #5
 8002096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800209a:	0150      	lsls	r0, r2, #5
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4641      	mov	r1, r8
 80020a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80020a6:	4649      	mov	r1, r9
 80020a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020c0:	ebb2 040a 	subs.w	r4, r2, sl
 80020c4:	eb63 050b 	sbc.w	r5, r3, fp
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	00eb      	lsls	r3, r5, #3
 80020d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d6:	00e2      	lsls	r2, r4, #3
 80020d8:	4614      	mov	r4, r2
 80020da:	461d      	mov	r5, r3
 80020dc:	4643      	mov	r3, r8
 80020de:	18e3      	adds	r3, r4, r3
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	464b      	mov	r3, r9
 80020e4:	eb45 0303 	adc.w	r3, r5, r3
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020f6:	4629      	mov	r1, r5
 80020f8:	028b      	lsls	r3, r1, #10
 80020fa:	4621      	mov	r1, r4
 80020fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002100:	4621      	mov	r1, r4
 8002102:	028a      	lsls	r2, r1, #10
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210a:	2200      	movs	r2, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	61fa      	str	r2, [r7, #28]
 8002110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002114:	f7fe fbcc 	bl	80008b0 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4613      	mov	r3, r2
 800211e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	3301      	adds	r3, #1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800213a:	e002      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetSysClockFreq+0x204>)
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002144:	4618      	mov	r0, r3
 8002146:	3750      	adds	r7, #80	; 0x50
 8002148:	46bd      	mov	sp, r7
 800214a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	00f42400 	.word	0x00f42400
 8002158:	007a1200 	.word	0x007a1200

0800215c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_RCC_GetHCLKFreq+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200000c0 	.word	0x200000c0

08002174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002178:	f7ff fff0 	bl	800215c <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	0a9b      	lsrs	r3, r3, #10
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	080030c4 	.word	0x080030c4

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021a0:	f7ff ffdc 	bl	800215c <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0b5b      	lsrs	r3, r3, #13
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	080030c4 	.word	0x080030c4

080021c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e041      	b.n	800225a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe ff28 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3304      	adds	r3, #4
 8002200:	4619      	mov	r1, r3
 8002202:	4610      	mov	r0, r2
 8002204:	f000 fac0 	bl	8002788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d001      	beq.n	800227c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e044      	b.n	8002306 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_TIM_Base_Start_IT+0xb0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d018      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x6c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a6:	d013      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x6c>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_TIM_Base_Start_IT+0xb4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00e      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x6c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_TIM_Base_Start_IT+0xb8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d009      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x6c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_TIM_Base_Start_IT+0xbc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d004      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x6c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_TIM_Base_Start_IT+0xc0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d111      	bne.n	80022f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d010      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f2:	e007      	b.n	8002304 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40000c00 	.word	0x40000c00
 8002324:	40014000 	.word	0x40014000

08002328 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	f241 1311 	movw	r3, #4369	; 0x1111
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10f      	bne.n	8002370 <HAL_TIM_Base_Stop_IT+0x48>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a1a      	ldr	r2, [r3, #32]
 8002356:	f240 4344 	movw	r3, #1092	; 0x444
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d107      	bne.n	8002370 <HAL_TIM_Base_Stop_IT+0x48>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b02      	cmp	r3, #2
 800239a:	d122      	bne.n	80023e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d11b      	bne.n	80023e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f06f 0202 	mvn.w	r2, #2
 80023b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f9bf 	bl	800274c <HAL_TIM_IC_CaptureCallback>
 80023ce:	e005      	b.n	80023dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f9b1 	bl	8002738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f9c2 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d122      	bne.n	8002436 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d11b      	bne.n	8002436 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0204 	mvn.w	r2, #4
 8002406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f995 	bl	800274c <HAL_TIM_IC_CaptureCallback>
 8002422:	e005      	b.n	8002430 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f987 	bl	8002738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f998 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b08      	cmp	r3, #8
 8002442:	d122      	bne.n	800248a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b08      	cmp	r3, #8
 8002450:	d11b      	bne.n	800248a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f06f 0208 	mvn.w	r2, #8
 800245a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2204      	movs	r2, #4
 8002460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f96b 	bl	800274c <HAL_TIM_IC_CaptureCallback>
 8002476:	e005      	b.n	8002484 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f95d 	bl	8002738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f96e 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b10      	cmp	r3, #16
 8002496:	d122      	bne.n	80024de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d11b      	bne.n	80024de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0210 	mvn.w	r2, #16
 80024ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2208      	movs	r2, #8
 80024b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f941 	bl	800274c <HAL_TIM_IC_CaptureCallback>
 80024ca:	e005      	b.n	80024d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f933 	bl	8002738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f944 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10e      	bne.n	800250a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f06f 0201 	mvn.w	r2, #1
 8002502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f90d 	bl	8002724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d10e      	bne.n	8002536 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	2b80      	cmp	r3, #128	; 0x80
 8002524:	d107      	bne.n	8002536 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800252e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fabb 	bl	8002aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	d10e      	bne.n	8002562 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b40      	cmp	r3, #64	; 0x40
 8002550:	d107      	bne.n	8002562 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f909 	bl	8002774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b20      	cmp	r3, #32
 800256e:	d10e      	bne.n	800258e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b20      	cmp	r3, #32
 800257c:	d107      	bne.n	800258e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0220 	mvn.w	r2, #32
 8002586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fa85 	bl	8002a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_TIM_ConfigClockSource+0x1c>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0b4      	b.n	800271c <HAL_TIM_ConfigClockSource+0x186>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ea:	d03e      	beq.n	800266a <HAL_TIM_ConfigClockSource+0xd4>
 80025ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f0:	f200 8087 	bhi.w	8002702 <HAL_TIM_ConfigClockSource+0x16c>
 80025f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f8:	f000 8086 	beq.w	8002708 <HAL_TIM_ConfigClockSource+0x172>
 80025fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002600:	d87f      	bhi.n	8002702 <HAL_TIM_ConfigClockSource+0x16c>
 8002602:	2b70      	cmp	r3, #112	; 0x70
 8002604:	d01a      	beq.n	800263c <HAL_TIM_ConfigClockSource+0xa6>
 8002606:	2b70      	cmp	r3, #112	; 0x70
 8002608:	d87b      	bhi.n	8002702 <HAL_TIM_ConfigClockSource+0x16c>
 800260a:	2b60      	cmp	r3, #96	; 0x60
 800260c:	d050      	beq.n	80026b0 <HAL_TIM_ConfigClockSource+0x11a>
 800260e:	2b60      	cmp	r3, #96	; 0x60
 8002610:	d877      	bhi.n	8002702 <HAL_TIM_ConfigClockSource+0x16c>
 8002612:	2b50      	cmp	r3, #80	; 0x50
 8002614:	d03c      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0xfa>
 8002616:	2b50      	cmp	r3, #80	; 0x50
 8002618:	d873      	bhi.n	8002702 <HAL_TIM_ConfigClockSource+0x16c>
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d058      	beq.n	80026d0 <HAL_TIM_ConfigClockSource+0x13a>
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d86f      	bhi.n	8002702 <HAL_TIM_ConfigClockSource+0x16c>
 8002622:	2b30      	cmp	r3, #48	; 0x30
 8002624:	d064      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x15a>
 8002626:	2b30      	cmp	r3, #48	; 0x30
 8002628:	d86b      	bhi.n	8002702 <HAL_TIM_ConfigClockSource+0x16c>
 800262a:	2b20      	cmp	r3, #32
 800262c:	d060      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x15a>
 800262e:	2b20      	cmp	r3, #32
 8002630:	d867      	bhi.n	8002702 <HAL_TIM_ConfigClockSource+0x16c>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d05c      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x15a>
 8002636:	2b10      	cmp	r3, #16
 8002638:	d05a      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x15a>
 800263a:	e062      	b.n	8002702 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f000 f996 	bl	800297c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800265e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	609a      	str	r2, [r3, #8]
      break;
 8002668:	e04f      	b.n	800270a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6899      	ldr	r1, [r3, #8]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f000 f97f 	bl	800297c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800268c:	609a      	str	r2, [r3, #8]
      break;
 800268e:	e03c      	b.n	800270a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	461a      	mov	r2, r3
 800269e:	f000 f8f3 	bl	8002888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2150      	movs	r1, #80	; 0x50
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 f94c 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 80026ae:	e02c      	b.n	800270a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	461a      	mov	r2, r3
 80026be:	f000 f912 	bl	80028e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2160      	movs	r1, #96	; 0x60
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f93c 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 80026ce:	e01c      	b.n	800270a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	461a      	mov	r2, r3
 80026de:	f000 f8d3 	bl	8002888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2140      	movs	r1, #64	; 0x40
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f92c 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 80026ee:	e00c      	b.n	800270a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f000 f923 	bl	8002946 <TIM_ITRx_SetConfig>
      break;
 8002700:	e003      	b.n	800270a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      break;
 8002706:	e000      	b.n	800270a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002708:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <TIM_Base_SetConfig+0xe4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00f      	beq.n	80027c0 <TIM_Base_SetConfig+0x38>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d00b      	beq.n	80027c0 <TIM_Base_SetConfig+0x38>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a31      	ldr	r2, [pc, #196]	; (8002870 <TIM_Base_SetConfig+0xe8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <TIM_Base_SetConfig+0x38>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a30      	ldr	r2, [pc, #192]	; (8002874 <TIM_Base_SetConfig+0xec>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <TIM_Base_SetConfig+0x38>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <TIM_Base_SetConfig+0xf0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d108      	bne.n	80027d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a25      	ldr	r2, [pc, #148]	; (800286c <TIM_Base_SetConfig+0xe4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01b      	beq.n	8002812 <TIM_Base_SetConfig+0x8a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d017      	beq.n	8002812 <TIM_Base_SetConfig+0x8a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a22      	ldr	r2, [pc, #136]	; (8002870 <TIM_Base_SetConfig+0xe8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <TIM_Base_SetConfig+0x8a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a21      	ldr	r2, [pc, #132]	; (8002874 <TIM_Base_SetConfig+0xec>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00f      	beq.n	8002812 <TIM_Base_SetConfig+0x8a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a20      	ldr	r2, [pc, #128]	; (8002878 <TIM_Base_SetConfig+0xf0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00b      	beq.n	8002812 <TIM_Base_SetConfig+0x8a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <TIM_Base_SetConfig+0xf4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <TIM_Base_SetConfig+0x8a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <TIM_Base_SetConfig+0xf8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0x8a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <TIM_Base_SetConfig+0xfc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d108      	bne.n	8002824 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a08      	ldr	r2, [pc, #32]	; (800286c <TIM_Base_SetConfig+0xe4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d103      	bne.n	8002858 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	615a      	str	r2, [r3, #20]
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40010000 	.word	0x40010000
 8002870:	40000400 	.word	0x40000400
 8002874:	40000800 	.word	0x40000800
 8002878:	40000c00 	.word	0x40000c00
 800287c:	40014000 	.word	0x40014000
 8002880:	40014400 	.word	0x40014400
 8002884:	40014800 	.word	0x40014800

08002888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	f023 0201 	bic.w	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f023 030a 	bic.w	r3, r3, #10
 80028c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	621a      	str	r2, [r3, #32]
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f023 0210 	bic.w	r2, r3, #16
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	031b      	lsls	r3, r3, #12
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	621a      	str	r2, [r3, #32]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	f043 0307 	orr.w	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	021a      	lsls	r2, r3, #8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	431a      	orrs	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	609a      	str	r2, [r3, #8]
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e050      	b.n	8002a76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d018      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d013      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10c      	bne.n	8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40000c00 	.word	0x40000c00
 8002a94:	40014000 	.word	0x40014000

08002a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e03f      	b.n	8002b52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe fad2 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2224      	movs	r2, #36	; 0x24
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f829 	bl	8002b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b0c0      	sub	sp, #256	; 0x100
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	ea40 0301 	orr.w	r3, r0, r1
 8002b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bb4:	f021 010c 	bic.w	r1, r1, #12
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd6:	6999      	ldr	r1, [r3, #24]
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	ea40 0301 	orr.w	r3, r0, r1
 8002be2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b8f      	ldr	r3, [pc, #572]	; (8002e28 <UART_SetConfig+0x2cc>)
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d005      	beq.n	8002bfc <UART_SetConfig+0xa0>
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b8d      	ldr	r3, [pc, #564]	; (8002e2c <UART_SetConfig+0x2d0>)
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d104      	bne.n	8002c06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bfc:	f7ff face 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8002c00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c04:	e003      	b.n	8002c0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c06:	f7ff fab5 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 8002c0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c18:	f040 810c 	bne.w	8002e34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c2e:	4622      	mov	r2, r4
 8002c30:	462b      	mov	r3, r5
 8002c32:	1891      	adds	r1, r2, r2
 8002c34:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c36:	415b      	adcs	r3, r3
 8002c38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c3e:	4621      	mov	r1, r4
 8002c40:	eb12 0801 	adds.w	r8, r2, r1
 8002c44:	4629      	mov	r1, r5
 8002c46:	eb43 0901 	adc.w	r9, r3, r1
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c5e:	4690      	mov	r8, r2
 8002c60:	4699      	mov	r9, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	eb18 0303 	adds.w	r3, r8, r3
 8002c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c6c:	462b      	mov	r3, r5
 8002c6e:	eb49 0303 	adc.w	r3, r9, r3
 8002c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	18db      	adds	r3, r3, r3
 8002c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c90:	4613      	mov	r3, r2
 8002c92:	eb42 0303 	adc.w	r3, r2, r3
 8002c96:	657b      	str	r3, [r7, #84]	; 0x54
 8002c98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ca0:	f7fd fe06 	bl	80008b0 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002caa:	fba3 2302 	umull	r2, r3, r3, r2
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	011c      	lsls	r4, r3, #4
 8002cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	1891      	adds	r1, r2, r2
 8002cca:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ccc:	415b      	adcs	r3, r3
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	eb12 0a01 	adds.w	sl, r2, r1
 8002cda:	4649      	mov	r1, r9
 8002cdc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf4:	4692      	mov	sl, r2
 8002cf6:	469b      	mov	fp, r3
 8002cf8:	4643      	mov	r3, r8
 8002cfa:	eb1a 0303 	adds.w	r3, sl, r3
 8002cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d02:	464b      	mov	r3, r9
 8002d04:	eb4b 0303 	adc.w	r3, fp, r3
 8002d08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d20:	460b      	mov	r3, r1
 8002d22:	18db      	adds	r3, r3, r3
 8002d24:	643b      	str	r3, [r7, #64]	; 0x40
 8002d26:	4613      	mov	r3, r2
 8002d28:	eb42 0303 	adc.w	r3, r2, r3
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d36:	f7fd fdbb 	bl	80008b0 <__aeabi_uldivmod>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002d42:	fba3 2301 	umull	r2, r3, r3, r1
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2264      	movs	r2, #100	; 0x64
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	1acb      	subs	r3, r1, r3
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002d58:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d64:	441c      	add	r4, r3
 8002d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d78:	4642      	mov	r2, r8
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	1891      	adds	r1, r2, r2
 8002d7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d80:	415b      	adcs	r3, r3
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d88:	4641      	mov	r1, r8
 8002d8a:	1851      	adds	r1, r2, r1
 8002d8c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d8e:	4649      	mov	r1, r9
 8002d90:	414b      	adcs	r3, r1
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002da0:	4659      	mov	r1, fp
 8002da2:	00cb      	lsls	r3, r1, #3
 8002da4:	4651      	mov	r1, sl
 8002da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002daa:	4651      	mov	r1, sl
 8002dac:	00ca      	lsls	r2, r1, #3
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	4642      	mov	r2, r8
 8002db6:	189b      	adds	r3, r3, r2
 8002db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	eb42 0303 	adc.w	r3, r2, r3
 8002dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ddc:	460b      	mov	r3, r1
 8002dde:	18db      	adds	r3, r3, r3
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	4613      	mov	r3, r2
 8002de4:	eb42 0303 	adc.w	r3, r2, r3
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002df2:	f7fd fd5d 	bl	80008b0 <__aeabi_uldivmod>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	2164      	movs	r1, #100	; 0x64
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	3332      	adds	r3, #50	; 0x32
 8002e0e:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	f003 0207 	and.w	r2, r3, #7
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4422      	add	r2, r4
 8002e22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e24:	e106      	b.n	8003034 <UART_SetConfig+0x4d8>
 8002e26:	bf00      	nop
 8002e28:	40011000 	.word	0x40011000
 8002e2c:	40011400 	.word	0x40011400
 8002e30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e46:	4642      	mov	r2, r8
 8002e48:	464b      	mov	r3, r9
 8002e4a:	1891      	adds	r1, r2, r2
 8002e4c:	6239      	str	r1, [r7, #32]
 8002e4e:	415b      	adcs	r3, r3
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e56:	4641      	mov	r1, r8
 8002e58:	1854      	adds	r4, r2, r1
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	eb43 0501 	adc.w	r5, r3, r1
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	00eb      	lsls	r3, r5, #3
 8002e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e6e:	00e2      	lsls	r2, r4, #3
 8002e70:	4614      	mov	r4, r2
 8002e72:	461d      	mov	r5, r3
 8002e74:	4643      	mov	r3, r8
 8002e76:	18e3      	adds	r3, r4, r3
 8002e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	eb45 0303 	adc.w	r3, r5, r3
 8002e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	008b      	lsls	r3, r1, #2
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eac:	4621      	mov	r1, r4
 8002eae:	008a      	lsls	r2, r1, #2
 8002eb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002eb4:	f7fd fcfc 	bl	80008b0 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4b60      	ldr	r3, [pc, #384]	; (8003040 <UART_SetConfig+0x4e4>)
 8002ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	011c      	lsls	r4, r3, #4
 8002ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ed0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ed4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ed8:	4642      	mov	r2, r8
 8002eda:	464b      	mov	r3, r9
 8002edc:	1891      	adds	r1, r2, r2
 8002ede:	61b9      	str	r1, [r7, #24]
 8002ee0:	415b      	adcs	r3, r3
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee8:	4641      	mov	r1, r8
 8002eea:	1851      	adds	r1, r2, r1
 8002eec:	6139      	str	r1, [r7, #16]
 8002eee:	4649      	mov	r1, r9
 8002ef0:	414b      	adcs	r3, r1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f00:	4659      	mov	r1, fp
 8002f02:	00cb      	lsls	r3, r1, #3
 8002f04:	4651      	mov	r1, sl
 8002f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	00ca      	lsls	r2, r1, #3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4619      	mov	r1, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	4642      	mov	r2, r8
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f1c:	464b      	mov	r3, r9
 8002f1e:	460a      	mov	r2, r1
 8002f20:	eb42 0303 	adc.w	r3, r2, r3
 8002f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f40:	4649      	mov	r1, r9
 8002f42:	008b      	lsls	r3, r1, #2
 8002f44:	4641      	mov	r1, r8
 8002f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	008a      	lsls	r2, r1, #2
 8002f4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f52:	f7fd fcad 	bl	80008b0 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4b38      	ldr	r3, [pc, #224]	; (8003040 <UART_SetConfig+0x4e4>)
 8002f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2264      	movs	r2, #100	; 0x64
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	1acb      	subs	r3, r1, r3
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	3332      	adds	r3, #50	; 0x32
 8002f70:	4a33      	ldr	r2, [pc, #204]	; (8003040 <UART_SetConfig+0x4e4>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f7c:	441c      	add	r4, r3
 8002f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f82:	2200      	movs	r2, #0
 8002f84:	673b      	str	r3, [r7, #112]	; 0x70
 8002f86:	677a      	str	r2, [r7, #116]	; 0x74
 8002f88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	1891      	adds	r1, r2, r2
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	415b      	adcs	r3, r3
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f9c:	4641      	mov	r1, r8
 8002f9e:	1851      	adds	r1, r2, r1
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	414b      	adcs	r3, r1
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fb4:	4659      	mov	r1, fp
 8002fb6:	00cb      	lsls	r3, r1, #3
 8002fb8:	4651      	mov	r1, sl
 8002fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	00ca      	lsls	r2, r1, #3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4642      	mov	r2, r8
 8002fca:	189b      	adds	r3, r3, r2
 8002fcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fce:	464b      	mov	r3, r9
 8002fd0:	460a      	mov	r2, r1
 8002fd2:	eb42 0303 	adc.w	r3, r2, r3
 8002fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe2:	667a      	str	r2, [r7, #100]	; 0x64
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	008b      	lsls	r3, r1, #2
 8002ff4:	4641      	mov	r1, r8
 8002ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ffa:	4641      	mov	r1, r8
 8002ffc:	008a      	lsls	r2, r1, #2
 8002ffe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003002:	f7fd fc55 	bl	80008b0 <__aeabi_uldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <UART_SetConfig+0x4e4>)
 800300c:	fba3 1302 	umull	r1, r3, r3, r2
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	2164      	movs	r1, #100	; 0x64
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	3332      	adds	r3, #50	; 0x32
 800301e:	4a08      	ldr	r2, [pc, #32]	; (8003040 <UART_SetConfig+0x4e4>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	f003 020f 	and.w	r2, r3, #15
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4422      	add	r2, r4
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800303a:	46bd      	mov	sp, r7
 800303c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003040:	51eb851f 	.word	0x51eb851f

08003044 <memset>:
 8003044:	4402      	add	r2, r0
 8003046:	4603      	mov	r3, r0
 8003048:	4293      	cmp	r3, r2
 800304a:	d100      	bne.n	800304e <memset+0xa>
 800304c:	4770      	bx	lr
 800304e:	f803 1b01 	strb.w	r1, [r3], #1
 8003052:	e7f9      	b.n	8003048 <memset+0x4>

08003054 <__libc_init_array>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	4d0d      	ldr	r5, [pc, #52]	; (800308c <__libc_init_array+0x38>)
 8003058:	4c0d      	ldr	r4, [pc, #52]	; (8003090 <__libc_init_array+0x3c>)
 800305a:	1b64      	subs	r4, r4, r5
 800305c:	10a4      	asrs	r4, r4, #2
 800305e:	2600      	movs	r6, #0
 8003060:	42a6      	cmp	r6, r4
 8003062:	d109      	bne.n	8003078 <__libc_init_array+0x24>
 8003064:	4d0b      	ldr	r5, [pc, #44]	; (8003094 <__libc_init_array+0x40>)
 8003066:	4c0c      	ldr	r4, [pc, #48]	; (8003098 <__libc_init_array+0x44>)
 8003068:	f000 f818 	bl	800309c <_init>
 800306c:	1b64      	subs	r4, r4, r5
 800306e:	10a4      	asrs	r4, r4, #2
 8003070:	2600      	movs	r6, #0
 8003072:	42a6      	cmp	r6, r4
 8003074:	d105      	bne.n	8003082 <__libc_init_array+0x2e>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	f855 3b04 	ldr.w	r3, [r5], #4
 800307c:	4798      	blx	r3
 800307e:	3601      	adds	r6, #1
 8003080:	e7ee      	b.n	8003060 <__libc_init_array+0xc>
 8003082:	f855 3b04 	ldr.w	r3, [r5], #4
 8003086:	4798      	blx	r3
 8003088:	3601      	adds	r6, #1
 800308a:	e7f2      	b.n	8003072 <__libc_init_array+0x1e>
 800308c:	080030d4 	.word	0x080030d4
 8003090:	080030d4 	.word	0x080030d4
 8003094:	080030d4 	.word	0x080030d4
 8003098:	080030d8 	.word	0x080030d8

0800309c <_init>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr

080030a8 <_fini>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr
